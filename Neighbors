if game.PlaceId == 12699642568 or game.PlaceId == 14236925335 then

    --Neighbors
    local success, vermLib = pcall(loadstring(game:HttpGet("https://pastebin.com/raw/Auvpvj7v")))
    if not success then
        warn("Failed to load vermLib: " .. tostring(vermLib))
        return
    end
    
    local window = vermLib:CreateWindow()
    local main = window:CreateTab("main", "Main", "") 
    local Player = window:CreateTab("Player", "Player", "") 
    local Target = window:CreateTab("Target", "Target", "") 
    local Visuals = window:CreateTab("Visuals", "Visuals", "") 
    local Other = window:CreateTab("Other", "Other", "") 
    local Universal = window:CreateTab("Universal", "Universal", "") 
    local Animations = window:CreateTab("Animations", "Animations", "") 
    game:GetService("CoreGui").ExperienceChat.appLayout.chatWindow.Visible = true
    local UserInputService = game:GetService("UserInputService")
    local players = game.Players
    local plr = players.LocalPlayer
    UserInputService = cloneref(game:GetService("UserInputService"))
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local plr = Players.LocalPlayer
    local workspace = game.Workspace
    local mouse = plr:GetMouse()
    local flying = false
    local ctrl = {f = 0, b = 0, l = 0, r = 0}
    local FlySpeed = 30  
    local currentAnim = nil
    local velocityHandlerName = "VelocityHandler"
    local gyroHandlerName = "GyroHandler"
    game:GetService("Players").LocalPlayer.DevCameraOcclusionMode = "Invisicam"
    local TweenService = game:GetService("TweenService")
    local ScreenGui = Instance.new("ScreenGui", game.CoreGui)
    
    local function Message(title, text, duration)
        
        local notificationFrame = Instance.new("Frame")
        notificationFrame.Size = UDim2.new(0.150000006, 0, 0.0599999987, 0) 
        notificationFrame.Position = UDim2.new(0.370000005, 0, 0, -500) 
        notificationFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) 
        notificationFrame.BackgroundTransparency = 0
        notificationFrame.BorderSizePixel = 0
        notificationFrame.ClipsDescendants = true
        notificationFrame.Parent = ScreenGui
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10) 
        corner.Parent = notificationFrame
    
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0.5, 0) 
        titleLabel.Text = title
        titleLabel.TextColor3 = Color3.fromRGB(179, 0, 255) 
        titleLabel.BackgroundTransparency = 1 
        titleLabel.Parent = notificationFrame
        titleLabel.TextSize = 14
    
        
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, 0, 0.5, 0) 
        textLabel.Position = UDim2.new(0, 0, 0.5, 0) 
        textLabel.Text = text
        textLabel.TextColor3 = Color3.fromRGB(179, 0, 255) 
        textLabel.BackgroundTransparency = 1 
        textLabel.Parent = notificationFrame
        textLabel.TextSize = 14
        
        local tweenPosition = TweenService:Create(notificationFrame, TweenInfo.new(0.5), {
            Position = UDim2.new(0.430000007, 0, 0, 0) 
        })
    
        
        local fadeDuration = 0.6
        local tweenTransparencyFrame = TweenService:Create(notificationFrame, TweenInfo.new(fadeDuration), {
            BackgroundTransparency = 1
        })
        
        local tweenTransparencyTitle = TweenService:Create(titleLabel, TweenInfo.new(fadeDuration), {
            TextTransparency = 1
        })
    
        local tweenTransparencyText = TweenService:Create(textLabel, TweenInfo.new(fadeDuration), {
            TextTransparency = 1
        })
    
        
        tweenPosition:Play()
        tweenPosition.Completed:Wait() 
        wait(duration) 
    
        
        tweenTransparencyFrame:Play()
        tweenTransparencyTitle:Play()
        tweenTransparencyText:Play()
    
        
        tweenTransparencyFrame.Completed:Wait() 
    end
    
    local IsOnMobile = table.find({Enum.Platform.IOS, Enum.Platform.Android}, UserInputService:GetPlatform())
    
    local function PlayAnim(id, time, speed)
            local hum = plr.Character:WaitForChild("Humanoid")
            local animtrack = hum:GetPlayingAnimationTracks()
            for _, track in pairs(animtrack) do
                track:Stop()
            end
            local Anim = Instance.new("Animation")
            Anim.AnimationId = "rbxassetid://"..id
            local loadanim = hum:LoadAnimation(Anim)
            loadanim:Play()
            loadanim.TimePosition = time
            loadanim:AdjustSpeed(speed)
            currentAnim = loadanim
    end
    
    local function StopAllAnims()
        if currentAnim then
            currentAnim:Stop()
            currentAnim = nil
        end
    end
    
    local function Fly()
        local UpperTorso = plr.Character:WaitForChild("UpperTorso")
        local bg = Instance.new("BodyGyro", UpperTorso)
        bg.P = 9e4
        bg.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        bg.CFrame = UpperTorso.CFrame
        local bv = Instance.new("BodyVelocity", UpperTorso)
        bv.Velocity = Vector3.new(0, 0.1, 0)
        bv.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        PlayAnim(10714347256, 4, 0)
    
        repeat
            wait()
            plr.Character:SetAttribute("Tripped", true)
            plr.Character.Humanoid.PlatformStand = true
            local speed = (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and FlySpeed or 0
    
            if speed > 0 then
                bv.Velocity = ((workspace.CurrentCamera.CFrame.LookVector * (ctrl.f + ctrl.b)) +
                ((workspace.CurrentCamera.CFrame * CFrame.new(ctrl.l + ctrl.r, (ctrl.f + ctrl.b) * 0.2, 0).p) - 
                workspace.CurrentCamera.CFrame.p)) * speed
            else
                bv.Velocity = Vector3.new(0, 0, 0)
            end
    
            bg.CFrame = workspace.CurrentCamera.CFrame * CFrame.Angles(-math.rad((ctrl.f + ctrl.b) * 70 * speed / FlySpeed), 0, 0)
        until not flying
        plr.Character:SetAttribute("Tripped", false)
        ctrl = {f = 0, b = 0, l = 0, r = 0}
        bg:Destroy()
        bv:Destroy()
        plr.Character.Humanoid.PlatformStand = false
        StopAllAnims() 
    end
    
    local function getRoot(char)
        return char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
    end
    
    local function unmobilefly(speaker)
        pcall(function()
            flying = false
            speaker.Character:SetAttribute("Tripped", false)
            local root = getRoot(speaker.Character)
            root:FindFirstChild(velocityHandlerName):Destroy()
            root:FindFirstChild(gyroHandlerName):Destroy()
            speaker.Character:FindFirstChildWhichIsA("Humanoid").PlatformStand = false
        end)
    end
    
    local function mobilefly(speaker)
        unmobilefly(speaker)
        flying = true
    
        local root = getRoot(speaker.Character)
        local camera = workspace.CurrentCamera
        local v3none = Vector3.new()
        local v3inf = Vector3.new(9e9, 9e9, 9e9)
    
        local bv = Instance.new("BodyVelocity", root)
        bv.Name = velocityHandlerName
        bv.MaxForce = v3inf
        bv.Velocity = v3none
    
        local bg = Instance.new("BodyGyro", root)
        bg.Name = gyroHandlerName
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 50
        StopAllAnims() 
        PlayAnim(10714347256, 4, 0)
    
        RunService.RenderStepped:Connect(function()
            root = getRoot(speaker.Character)
            speaker.Character:SetAttribute("Tripped", true)
            camera = workspace.CurrentCamera
            if speaker.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
                local humanoid = speaker.Character:FindFirstChildWhichIsA("Humanoid")
                local VelocityHandler = root:FindFirstChild(velocityHandlerName)
                local GyroHandler = root:FindFirstChild(gyroHandlerName)
    
                VelocityHandler.MaxForce = v3inf
                GyroHandler.MaxTorque = v3inf
                humanoid.PlatformStand = true
                GyroHandler.CFrame = camera.CFrame
                VelocityHandler.Velocity = v3none
    
                local direction = Vector3.new(ctrl.r - ctrl.l, 0, ctrl.b - ctrl.f).Unit
                VelocityHandler.Velocity = direction * FlySpeed
            end
        end)
    end
    
    Player:CreateToggle("Fly", function(EnableFly)
        if EnableFly then
            if not IsOnMobile then
                flying = true
                local KeyDownFunction, KeyUpFunction
    
                KeyDownFunction = mouse.KeyDown:Connect(function(key)
                    if flying then
                        if key:lower() == "w" then
                            ctrl.f = 1
                            PlayAnim(10714177846, 4.65, 0) 
                        elseif key:lower() == "s" then
                            ctrl.b = -1
                            PlayAnim(10147823318, 4.11, 0) 
                        elseif key:lower() == "a" then
                            ctrl.l = -1
                            PlayAnim(10147823318, 3.55, 0) 
                        elseif key:lower() == "d" then
                            ctrl.r = 1
                            PlayAnim(10147823318, 4.81, 0) 
                        end
                    end
                end)
    
                KeyUpFunction = mouse.KeyUp:Connect(function(key)
                    if flying then
                        if key:lower() == "w" then
                            ctrl.f = 0
                        elseif key:lower() == "s" then
                            ctrl.b = 0
                        elseif key:lower() == "a" then
                            ctrl.l = 0
                        elseif key:lower() == "d" then
                            ctrl.r = 0
                        end
                        StopAllAnims() 
                        if ctrl.f + ctrl.b + ctrl.l + ctrl.r == 0 then
                            PlayAnim(10714347256, 4, 0) 
                        end
                    end
                end)
    
                Fly()
            else
                mobilefly(plr)
            end
        else
            flying = false
            unmobilefly(plr)
            if KeyDownFunction then KeyDownFunction:Disconnect() end
            if KeyUpFunction then KeyUpFunction:Disconnect() end
            StopAllAnims() 
            ctrl = {f = 0, b = 0, l = 0, r = 0} 
        end
    end)
    
    
    Player:CreateBox("Fly Speed", "string", function(FlySpeed) 
        FlySpeedS = (FlySpeed)
    end)
    
    local whitelist = {}
    local targetList = {}
    
    ALLYCOLOR = {0,255,255}
    ENEMYCOLOR =  {255,0,0}
    TRANSPARENCY = 0.9			
    HEALTHBAR_ACTIVATED = false
    
    local Character = plr.Character or plr.CharacterAdded:Wait()
    local ToolName = "Pitchfork"
    local teleportEnabled = false
    
    
    local function teleportNearestPlayer()
        
        local hasTool = Character:FindFirstChild(ToolName) or plr.Backpack:FindFirstChild(ToolName)
        
        if not hasTool then
            print("You do not have a Pitchfork.")
            return
        end
    
        local nearestPlayer = nil
        local nearestDistance = math.huge
    
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= plr and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (player.Character.HumanoidRootPart.Position - Character.HumanoidRootPart.Position).magnitude
                
                if distance < nearestDistance then
                    nearestDistance = distance
                    nearestPlayer = player
                end
            end
        end
    
        if nearestPlayer then
            
            local direction = Character.HumanoidRootPart.CFrame.LookVector
            local newCFrame = Character.HumanoidRootPart.CFrame + direction * 3
    
            
            nearestPlayer.Character.HumanoidRootPart.CFrame = newCFrame
            print(nearestPlayer.Name .. " has been teleported 5 studs in front of you.")
        else
            print("No nearby players found.")
        end
    end
    
    main:CreateToggle("Pitch Nearest", function(PitchForkNearest)
        teleportEnabled = PitchForkNearest
    
        if not teleportEnabled then
            print("Teleport feature disabled.")
            return
        end
    
        print("Teleport feature enabled. Click to teleport the nearest player.")
    
        
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and teleportEnabled then
                teleportNearestPlayer()
            end
        end)
    end)
    main:CreateToggle("Auto Lasso Nearest Players", function(ALP) 
        getgenv().ALPs = ALP
    
        local function autoLasso()
            local lassoTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool")
            if not lassoTool then
                lassoTool = game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool")
            end
    
            if lassoTool and lassoTool:FindFirstChild("RopeEvent") then
                while getgenv().ALPs do
                    wait(0)
                    local playersToLasso = {}
                    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= plr and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local distance = (player.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                            -- Check if the player is in the target list
                            if distance < 1300 and targetList[player.Name] then
                                table.insert(playersToLasso, player)
                            end
                        end
                    end
    
                    if #playersToLasso > 0 then
                        for _, playerToLasso in pairs(playersToLasso) do
                            local args = {
                                [1] = playerToLasso.Character.HumanoidRootPart,
                                [2] = plr.Character.HumanoidRootPart.Position
                            }
                            lassoTool.RopeEvent:InvokeServer(unpack(args))
                        end
                    end
                end
            else
                getgenv().ALPs = false
                return
            end
        end
    
        autoLasso()
    end)
    
    main:CreateToggle("Auto Collect Candies", function(AutocollectCandies)
        getgenv().AutocollectCandies = AutocollectCandies
        local player = game.Players.LocalPlayer
        
        while true do
            wait(0) 
    
            if not getgenv().AutocollectCandies then
                return 
            end
    
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoid = character:WaitForChild("Humanoid")
            local originalCFrame = character.PrimaryPart.CFrame
    
            
            local candiesFolder = game.workspace:FindFirstChild("Candies")
            if not candiesFolder then
                wait(1) 
                continue 
            end
    
            wait(0.1) 
            local candies = candiesFolder:GetChildren()
            local found = false
    
            for _, candy in ipairs(candies) do
                if candy:IsA("MeshPart") and candy.Transparency < 1 then
                    
                    if humanoid:GetState() == Enum.HumanoidStateType.Seated then
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping) 
                        wait(0.1) 
                    end
                    
                    
                    character:SetPrimaryPartCFrame(candy.CFrame)
                    wait(0.1) 
                    character:SetPrimaryPartCFrame(originalCFrame) 
                    found = true
                    break
                end
            end
    
            if not found then
                wait(0.1) 
            end
        end    
    end)
    
    
    main:CreateButton("Target Panel", function(state)
            
    
            local playerListGui = Instance.new("ScreenGui")
            playerListGui.Parent = game.Players.LocalPlayer.PlayerGui
    
            local selectedButtons = {}
            local selectedPlayers = {}
            local lassoTool = nil 
            local currentSortingOption = "Closest to furthest"
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            local humanoid = character:WaitForChild("Humanoid")
    
            local function getDistance(part1, part2)
                return (part1.Position - part2.Position).Magnitude
            end
    
            local function onButtonClicked(button, playerName)
                local player = game.Players:FindFirstChild(playerName)
                if player then
                    if selectedButtons[button] then
                        button.TextColor3 = Color3.fromRGB(255, 255, 255)
                        button.BackgroundTransparency = 1
                        selectedButtons[button] = nil
                        selectedPlayers[player] = nil
                    else
                        button.TextColor3 = Color3.fromRGB(153, 0, 255)
                        button.BackgroundTransparency = 0.5
                        selectedButtons[button] = true
                        selectedPlayers[player] = true
                    end
                end
            end
    
            local frame = Instance.new("Frame")
            frame.Size = UDim2.new(0, 300, 0, 900) 
            frame.Position = UDim2.new(0.5, 407, 0.5, -492) 
            frame.BackgroundTransparency = 0 
            frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            frame.BorderSizePixel = 0
            frame.Parent = playerListGui
            frame.Transparency = 0.7
    
            local isDragging = false
            local dragStart = Vector3.new(0, 0, 0)
            local startPos = Vector3.new(0, 0, 0)
    
            frame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                    dragStart = input.Position
                    startPos = frame.Position
                end
            end)
    
            frame.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                end
            end)
    
            game:GetService("UserInputService").InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement and isDragging then
                    local delta = input.Position - dragStart
                    frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                end
            end)
    
            local targetButton = Instance.new("TextButton")
            targetButton.Size = UDim2.new(0.1, 0, 0.1, 0)
            targetButton.Position = UDim2.new(0, 105, 0.9, 0) 
            targetButton.Text = "Target"
            targetButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            targetButton.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            targetButton.BackgroundTransparency = 0.9
            targetButton.Parent = frame
    
    
            targetButton.MouseButton1Click:Connect(function()
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool") then
                    lassoTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool")
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(lassoTool)
                elseif game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool") then
                    lassoTool = game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool")
                end
    
                for player, _ in pairs(selectedPlayers) do
                    local character = game.Players.LocalPlayer.Character
                    if character and player then
                        local rootPart = character:FindFirstChild("HumanoidRootPart")
                        local selectedRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                        if rootPart and selectedRootPart then
                            local distance = (rootPart.Position - selectedRootPart.Position).Magnitude
                            if distance <= 300 then
                                selectedRootPart.CFrame = rootPart.CFrame * CFrame.new(0,4,-5)
                            end
                        end
                    end
    
                    if lassoTool then
                        local args = {
                            [1] = player.Character.HumanoidRootPart,
                            [2] = plr.Character.HumanoidRootPart.Position
                        }
                        lassoTool.RopeEvent:InvokeServer(unpack(args))
                                    local args = {
                            [1] = player.Character.HumanoidRootPart,
                            [2] = player.Character.HumanoidRootPart.Position
                        }
                        lassoTool.RopeEvent:InvokeServer(unpack(args))
                            wait(0.2)
                        if game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool") then
                            lassoTool = game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool")
                            game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                            game.Players.LocalPlayer.Backpack:Add(lassoTool)
                        elseif game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool") then
                            lassoTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool")
                            wait(1)
    
                        end
                    end
                end
    
            end)
    
            local targetButtonn = Instance.new("TextButton")
            targetButtonn.Size = UDim2.new(0.1, 0, 0.1, 0)
            targetButtonn.Position = UDim2.new(0, 70, 0.9, 0) 
            targetButtonn.Text = "Bring Hostage"
            targetButtonn.TextColor3 = Color3.fromRGB(255, 255, 255)
            targetButtonn.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            targetButtonn.BackgroundTransparency = 0.9
            targetButtonn.Parent = frame
            targetButtonn.Name = "Bring Hostage"
    
    
            local Players = game:GetService("Players")
            local localPlayer = Players.LocalPlayer
    
            targetButtonn.MouseButton1Click:Connect(function()
                local lassoTool
    
                
                if localPlayer.Backpack:FindFirstChild("Lasso Tool") then
                    lassoTool = localPlayer.Backpack:FindFirstChild("Lasso Tool")
                    localPlayer.Character.Humanoid:EquipTool(lassoTool)
                elseif localPlayer.Character:FindFirstChild("Lasso Tool") then
                    lassoTool = localPlayer.Character:FindFirstChild("Lasso Tool")
                end
    
                
                for player, _ in pairs(selectedPlayers) do
                    if player and player.Character then
                        local character = player.Character
                        local rootPart = localPlayer.Character:FindFirstChild("HumanoidRootPart")
                        local selectedRootPart = character:FindFirstChild("HumanoidRootPart")
    
                        if rootPart and selectedRootPart then
                            local distance = (rootPart.Position - selectedRootPart.Position).Magnitude
    
                            
                            if distance < 13 then
                                
                                local direction = (rootPart.Position - selectedRootPart.Position).Unit
                                
                                local newPosition = selectedRootPart.Position + direction * 13
    
                                
                                localPlayer.Character:SetPrimaryPartCFrame(CFrame.new(newPosition))
                                wait(0.2)
                            end
    
                            
                            local args = {
                                [1] = selectedRootPart,
                                [2] = rootPart.Position
                            }
                            lassoTool.RopeEvent:InvokeServer(unpack(args))
    
                            
                            local humanoid = character:FindFirstChildOfClass("Humanoid")
                            local orbitDistance = 10 
                            local orbitSpeed = 2 
                            local angle = 0
    
                            local function updateOrbit()
                                if character:GetAttribute("Ragdoll") == true then
                                    humanoid.PlatformStand = true
                                    humanoid.UseJumpPower = false
    
                                    angle = angle + orbitSpeed * RunService.RenderStepped:Wait()
                                    local offset = Vector3.new(math.cos(angle) * orbitDistance, 0, math.sin(angle) * orbitDistance)
                                    local newPosition = rootPart.Position + offset
    
                                    if character.PrimaryPart then
                                        character:SetPrimaryPartCFrame(CFrame.new(newPosition) * CFrame.Angles(0, angle, 0))
                                    end
                                else
                                    humanoid.PlatformStand = false
                                    humanoid.UseJumpPower = true
                                    return true
                                end
                            end
    
                            local connection
                            connection = RunService.RenderStepped:Connect(function()
                                if updateOrbit() then
                                    connection:Disconnect()
                                end
                            end)
                            wait(0.2)
                        end
                    end
                end
            end)
    
    
    
            local LockInBathroom = Instance.new("TextButton")
            LockInBathroom.Size = UDim2.new(0.1, 0, 0.1, 0)
            LockInBathroom.Position = UDim2.new(0, 35, 0.9, 0) 
            LockInBathroom.Text = "Trap"
            LockInBathroom.TextColor3 = Color3.fromRGB(255, 255, 255)
            LockInBathroom.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            LockInBathroom.BackgroundTransparency = 0.9
            LockInBathroom.Parent = frame
            LockInBathroom.Name = "Trap"
    
    
            LockInBathroom.MouseButton1Click:Connect(function()
                local currentX = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X
                local currentY = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Y
                local currentZ = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Z  
    
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool") then
                    lassoTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool")
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(lassoTool)
                elseif game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool") then
                    lassoTool = game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool")
                end
    
                    local function findNearestShelf(parent)
                        local nearestShelf = nil
                        local nearestDistance = math.huge 
                    
                        for _, item in pairs(parent:GetChildren()) do
                            if item:IsA("MeshPart") and item.Name == "Shelves" then 
                                local distance = (humanoidRootPart.Position - item.Position).magnitude
                                if distance < nearestDistance then
                                    nearestDistance = distance
                                    nearestShelf = item
                                end
                            end
                        
                            
                            local childShelf = findNearestShelf(item)
                            if childShelf then
                                local childDistance = (humanoidRootPart.Position - childShelf.Position).magnitude
                                if childDistance < nearestDistance then
                                    nearestDistance = childDistance
                                    nearestShelf = childShelf
                                end
                            end
                        end
                    
                        return nearestShelf
                    end
    
                    
                    local nearestShelf = findNearestShelf(workspace)
                    if nearestShelf then
                        if humanoid.Sit then
                            humanoid.Sit = false 
                            humanoid:ChangeState(Enum.HumanoidStateType.Jumping) 
                            wait(0.3)
                        end
                        humanoidRootPart.CFrame = nearestShelf.CFrame * CFrame.new(0, 0, -14) 
                    end
    
            for player, _ in pairs(selectedPlayers) do
                local character = game.Players.LocalPlayer.Character
                if character and player then
                    local rootPart = character:FindFirstChild("HumanoidRootPart")
                    local selectedRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                    if rootPart and selectedRootPart then
                        local distance = (rootPart.Position - selectedRootPart.Position).Magnitude
                        if distance <= 300 then
                            if lassoTool then
    
                                if player and player.Character then
                                    wait(0.1)
                                    local args = {
                                        [1] = player.Character.HumanoidRootPart,
                                        [2] = plr.Character.HumanoidRootPart.Position
                                    }
                                        game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool").RopeEvent:InvokeServer(unpack(args))
                                        wait(0.3)
                                        player.Character:SetPrimaryPartCFrame(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 1, 9.4))
                                                                    wait(0.3)
                                        game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                        wait(0.12)
                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(currentX, currentY , currentZ)
                                end  
                            end
                        end
                    end
                end
    
                end
    
            end)
    
            local targetButtonnnn = Instance.new("TextButton")
            targetButtonnnn.Size = UDim2.new(0.1, 0, 0.1, 0)
            targetButtonnnn.Position = UDim2.new(0, 140, 0.9, 0) 
            targetButtonnnn.Text = "Target"
            targetButtonnnn.TextColor3 = Color3.fromRGB(255, 255, 255)
            targetButtonnnn.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            targetButtonnnn.BackgroundTransparency = 0.9
            targetButtonnnn.Parent = frame
    
            targetButtonnnn.MouseButton1Click:Connect(function()
                if game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool") then
                    lassoTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Lasso Tool")
                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(lassoTool)
                elseif game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool") then
                    lassoTool = game.Players.LocalPlayer.Character:FindFirstChild("Lasso Tool")
                end
    
                for player, _ in pairs(selectedPlayers) do
                    local character = game.Players.LocalPlayer.Character
                    if character and player then
                        local rootPart = character:FindFirstChild("HumanoidRootPart")
                        local selectedRootPart = player.Character:FindFirstChild("HumanoidRootPart")
                        if rootPart and selectedRootPart then
                            local distance = (rootPart.Position - selectedRootPart.Position).Magnitude
                            if distance <= 300 then
                                if lassoTool then
                                    local args = {
                                        [1] = player.Character.HumanoidRootPart,
                                        [2] = plr.Character.HumanoidRootPart.Position
                                    }
                                    lassoTool.RopeEvent:InvokeServer(unpack(args))
                                                local args = {
                                        [1] = player.Character.HumanoidRootPart,
                                        [2] = plr.Character.HumanoidRootPart.Position
                                    }
                                    lassoTool.RopeEvent:InvokeServer(unpack(args))
                                    wait(0.2)
                                selectedRootPart.CFrame = rootPart.CFrame * CFrame.new(0,-10,-5)
                                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                end
                            end
                        end
                    end
    
                end
    
            end)
    
    
            local scrollingFrame = Instance.new("ScrollingFrame")
            scrollingFrame.Size = UDim2.new(1, 0, 0.9, 0) 
    
            scrollingFrame.BackgroundTransparency = 1 
            scrollingFrame.ScrollBarThickness = 10 
            scrollingFrame.CanvasSize = UDim2.new(0, 0, 0, #game.Players:GetPlayers() * 40) 
            scrollingFrame.Parent = frame
    
            local clearButton = Instance.new("TextButton")
            clearButton.Size = UDim2.new(0.1, 0, 0.1, 0)
            clearButton.Position = UDim2.new(0, 0, 0.9, 0)
            clearButton.Text = "Clear"
            clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            clearButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
            clearButton.BackgroundTransparency = 0.9
            clearButton.Parent = frame
            
            local function refreshPlayerList()
                
                local selectedPlayer = nil
                for player, _ in pairs(selectedPlayers) do
                    selectedPlayer = player
                    break
                end
    
                
                for _, button in pairs(scrollingFrame:GetChildren()) do
                    if button:IsA("TextButton") then
                        button:Destroy()
                    end
                end
    
                
                local playerDistances = {}
                for _, player in pairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer then
                        local playerCharacter = player.Character
                        local playerRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
                        local localPlayerRootPart = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if playerRootPart and localPlayerRootPart then
                            local distance = getDistance(localPlayerRootPart, playerRootPart)
                            playerDistances[player] = distance
                        end
                    end
                end
    
                
                local sortedPlayerDistances = {}
                for player, distance in pairs(playerDistances) do
                    if not selectedPlayers[player] then
                        table.insert(sortedPlayerDistances, {player = player, distance = distance})
                    end
                end
    
                table.sort(sortedPlayerDistances, function(a, b)
                    return a.distance < b.distance
                end)
    
                
                local selectedPlayerButtons = {}
                for player, _ in pairs(selectedPlayers) do
                    local playerDistance = playerDistances[player]
                    table.insert(selectedPlayerButtons, {player = player, distance = playerDistance})
                end
    
                table.sort(selectedPlayerButtons, function(a, b) return a.distance < b.distance end)
                for _, data in ipairs(selectedPlayerButtons) do
                    table.insert(sortedPlayerDistances, 1, data)
                end
    
                
                local buttonCount = 0
                local selectedButtonIndex = nil
                for i, data in ipairs(sortedPlayerDistances) do
                    local player = data.player
                    local distance = data.distance
    
                    local button = Instance.new("TextButton")
                    button.Size = UDim2.new(1, 0, 0, 40) 
                    button.Position = UDim2.new(0, 0, 0, buttonCount * 40) 
                    button.Text = player.Name .. " (" .. math.floor(distance) .. " studs)"
                    button.TextColor3 = Color3.fromRGB(255, 255, 255)
                    button.BackgroundTransparency = 1 
    
                    
                    if selectedPlayers[player] then
                        button.TextColor3 = Color3.fromRGB(153, 0, 255)
                        button.BackgroundTransparency = 0.5
                        selectedButtonIndex = i
                    end
    
                    button.MouseButton1Click:Connect(function()
                        onButtonClicked(button, player.Name)
                    end)
    
                    button.Parent = scrollingFrame
                    buttonCount = buttonCount + 1
                end
    
                
                if selectedPlayer then
                    local selectedButton = scrollingFrame:FindFirstChild(selectedPlayer.Name)
                    if selectedButton then
                        selectedButton.Text = selectedPlayer.Name .. " (" .. math.floor(playerDistances[selectedPlayer]) .. " studs)"
                        selectedButton.TextColor3 = Color3.fromRGB(153, 0, 255)
                        selectedButton.BackgroundTransparency = 0.5
                    end
                end
            end
    
    
            clearButton.MouseButton1Click:Connect(function()
                for button, _ in pairs(selectedButtons) do
                    refreshPlayerList()
                    button.TextColor3 = Color3.fromRGB(255, 255, 255)
                    button.BackgroundTransparency = 1
                end
                selectedButtons = {}
                refreshPlayerList()
    
                selectedPlayers = {}
            end)
    
    
            
            refreshPlayerList()
    
            
            local refreshInterval = 1
            while true do
                wait(refreshInterval)
                refreshPlayerList()
        end
    
    end)
    Target:CreateToggle("Get IngameEmotes GUI", function(asdasd)
        getgenv().IngameEmotess = asdasd
        while true do wait(0)
        if not getgenv().IngameEmotess then
            return end
        end
    end)
    
    
    local function ApplyESP() 
            for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v ~= game:GetService("Players").LocalPlayer then
                    local character = v.Character
                    if character and character:FindFirstChild("Head") and character.Head:FindFirstChild("Name") == nil then
                        local head = character.Head
                        local a = Instance.new("BillboardGui", head)
                        a.Name = "Name"
                        a.AlwaysOnTop = true
                        a.Size = UDim2.new(8, 0, 1.5, 0)
                        a.StudsOffsetWorldSpace = Vector3.new(0, 2.635981321334839, 0)
                        local b = Instance.new("Frame", a)
                        b.Size = UDim2.new(1, 0, 1, 0)
                        b.BackgroundTransparency = 1
                        b.BorderSizePixel = 0
                        local c = Instance.new("TextLabel", b)
                        c.Text = v.Name
                        c.TextColor3 = Color3.fromRGB(125, 125, 125)
                        c.Size = UDim2.new(1, 0, 0.5, 0)
                        c.BackgroundTransparency = 1
                        c.BorderSizePixel = 0
                        c.TextSize = 12
                        c.TextStrokeTransparency = 0.7
                        c.TextScaled = true
                        c.RichText = true
                        c.TextWrapped = false
                    end
                end
            end
        end
    
        local function ApplyChams()
            for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v ~= game:GetService("Players").LocalPlayer and v.Character:FindFirstChild("Highlight") == nil then
                    local char = v.Character
                    local a = Instance.new("Highlight", char)
                    a.FillTransparency = 0.9
                    a.FillColor = Color3.fromRGB(110, 37, 135)
                end
            end
        end
    
        Visuals:CreateToggle("Player ESP", function(PlayerESO)
            getgenv().PlayerESP = PlayerESO
            while true do
                if getgenv().PlayerESP then
                    ApplyESP()
                else
                    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                        if v ~= game:GetService("Players").LocalPlayer then
                            local character = v.Character
                            if character and character:FindFirstChild("Head") then
                                local head = character.Head
                                local nameGui = head:FindFirstChild("Name")
                                if nameGui then
                                    nameGui:Destroy()
                                end
                            end
                        end
                    end
                end
                wait(1) 
            end
        end)
    
        Visuals:CreateToggle("Player Chams", function(PlayerChams)
            getgenv().PlayerChams = PlayerChams
            while true do
                if getgenv().PlayerChams then
                    ApplyChams()
                else
                    for _, v in pairs(game:GetService("Players"):GetPlayers()) do
                        if v ~= game:GetService("Players").LocalPlayer then
                            local character = v.Character:FindFirstChild("Highlight")
                            if character then
                                character:Destroy()
                            end
                        end
                    end
                end
                wait(1)
            end
        end)     
    
        --- universal
        ---  Ḋị́ļ̣ḋọ̄(works)
        ---  Ǹḯģ́ģ̇ệṛ̇(works)
        ---  Ｂị́ţ̣ç̣ħ̣(works)
        ---  ‘Dị́ç̣ḳ(works)
        ---  Ħō̄ẹ́̃(works)
        ---  Č̣û̇̄ṃ̈(works)
        ---  Ĥá̄ń̈t̄î̂(idk if I spelled it wrong)
        ---  ṔĹ̄Ś̂ ḒŌ̄Ñ̈Ť̈ FÙ̇Ć̂Ḳ̈ Ṃ̇Ỵ̈ Ḅ̇Ọ̄Ọ̈Ţ̄Ÿ̂ Ḥ̇Ọ̄Ĺ̂Ê̂(works)
        ---  Ẇḧ̄Ō̈ ë̄ļ̇š̈è̃ ł̣ô̄ṿ̇ẹ̄ṣ̌ pö̇ṛ́ṇ́ hǖḃ̄(works)
        ---  Ǹí́ĝ́
        ---  Ḹë̇š̂b̈î̂ã̃ń̄(works)
        ---  Ṿî̄ṟ̂ġ̈ï̇ñ̃(works)
        ---  Ĉ̇ǖñ̇ţ̈(works)
        ---  Ẉ̇ḥ̈ō̄ṛ́ë̂(works)
        ---  Ṗ̄ë̇ń̈î̃ś̂(works)
        ---  Ṭ̌î̄ť̈ï̂ē̄š̄(works)
        ---  Ṧë̄ẍ(works)
        ---  Š̄ĥ̄ü̈ŧ̇ Ụ̄p̂ Ď̄ī̄ć̄ḳ̣ Ŗ̄ī̇ḍ̇ẹ̄ŕ̂(works)
        ---  ṔŁ̇Ś̄ ḒỌ̈Ń̄Ť̈ Č̣ǕḾ̂ Ï̇Ñ̇ Ṃ́Ÿ̇ ḂỌ̈Ō̈Ţ̂Ÿ̂ Ŵ̈Ḣ̄Ō̄Ĺ̄Ĕ̈(works)
        ---  Ẇ̄ţ̈ḟ̇(works)
    
        local letters = {
            ["a"] = "ẳ",
            ["b"] = "ɓ",
            ["c"] = "ㄈ",
            ["d"] = "ȡ",
            ["e"] = "ȇ",
            ["f"] = "ӻ",
            ["g"] = "ɠ",
            ["h"] = "ȟ",
            ["i"] = "׀",
            ["j"] = "ǰ",
            ["k"] = "ҟ",
            ["l"] = "ȴ",
            ["m"] = "ɱ",
            ["n"] = "冂",
            ["o"] = "ό",
            ["p"] = "ᵽ",
            ["q"] = "ԛ",
            ["r"] = "ŗ",
            ["s"] = "ȿ",
            ["t"] = "丅",
            ["u"] = "ȕ",
            ["v"] = "ѵ",
            ["w"] = "ώ",
            ["x"] = "ẍ",
            ["y"] = "ƴ",
            ["z"] = "ȥ",    }
        
        local tcs = game:GetService("TextChatService")
        local chats = game:GetService("Chat")
        local chat = tcs.ChatInputBarConfiguration.TargetTextChannel
        
        local function replace(str, find_str, replace_str)
            local escaped_find_str = find_str:gsub("[%-%^%$%(%)%%%.%[%]%*%+%-%?]", "%%%0")
            return str:gsub(escaped_find_str, replace_str)
        end
        
        
        local function filter(message)
            for search, replacement in pairs(letters) do
                message = replace(message, search, replacement)
            end
            return message
        end
        
        local function clearlogsf()
            for i = 1, 19 do
                chat:SendAsync("")
            end
        end
        
        local function filtermsg(str)
            local f = chats:FilterStringForBroadcast(str, plr) ~= str
            if f then
                return "fuck"
            end
            return str
        end
        local function sendchat(msg)
            local a = filtermsg(msg)
            if a~="fuck" then
                if tcs.ChatVersion == Enum.ChatVersion.LegacyChatService then
                    game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents").SayMessageRequest:FireServer(a,"All")
                else
                    chat:SendAsync(a)
                end
            else
                Message("Message Tagged", "Bad Quality", 5)
            end
        end
    
        local RevokedAdmin = " heeee"
    
        local GiveAdmin = " heee"
    
        local function sendchatT(msgg)
            local aa = filtermsg(msgg)
            if aa~="fuck" then
                if tcs.ChatVersion == Enum.ChatVersion.LegacyChatService then
                    local TargetPlayersssss = GetPlayer(Targetnms)
                    local specificPlayer = "All"  
    
                    local args = {
                        [1] = aa,
                        [2] = "All"
                    }
    
                    game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer(unpack(args))
                                print("TargetPlayersssss")
    
                else
                    chat:SendAsync(aa)
                end
            else
                Message("Message Tagged", "Bad Quality", 5)
            end
        end
    
        Universal:CreateBox("Chat Input", "string", function(boxs)
            sendchat(filter(boxs))
        end)
    
        Universal:CreateButton("clear logs", function(OPENS) 
            clearlogsf()
        end)
    
        local UserInputService = game:GetService("UserInputService")
    
        getgenv().AimAtHeadEnabled = false
    
        Universal:CreateButton("Universal Emotes", function(state)
        loadstring(game:HttpGet("https://scriptblox.com/raw/Brookhaven-RP-all-emotes-6849"))()
        end)
        Universal:CreateButton("Infinite Yield", function(state) 
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()
        end)
    
        Animations:CreateToggle("Get IngameEmotes GUI", function(IngameEmotes)
            getgenv().IngameEmotess = IngameEmotes
            while true do wait(0)
            if not getgenv().IngameEmotess then
                return end
                local LocalPlayer = Players.LocalPlayer
                local PlayerGui = LocalPlayer.PlayerGui
                
                if PlayerGui:FindFirstChild("Animations") == nil then
                    
                    local loganWS = game:FindFirstChild("LoganWS")
                    if loganWS then
                        loganWS:Destroy() 
                    end
        
                local animations = { 
                    ["Robot"] = 12992899456,
                    ["YMCA"] = 12992183809,
                    ["Pixel Dance"] = 12992971601,
                    ["Sweeping By"] = 12993411905,
                    ["Getting Down"] = 12993465611,
                    ["Samba1"] = 12992656048,
                    ["Gangnam"] = 12992429932,
                    ["Twist"] = 12992907026,
                    ["Breakdown"] = 12992718451,
                    ["ClassicJustice"] = 12993190722,
                    ["House"] = 12992170853,
                    ["Peter Parker"] = 12993056110,
                    ["Free Flow"] = 12992701153,
                    ["ChickenDance"] = 12993617382,
                    ["HavingFun"] = 12993391346,
                    ["Can Can"] = 12992104148,
                    ["HokeyPokey"] = 12993340787,
                    ["ShakeItOff"] = 12992391426,
                    ["Hoolahoop"] = 12993590379,
                    ["Sturdy1"] = 12994114440,
                    ["Rumba"] = 12993576881,
                    ["Floss"] = 12992769625,
                    ["MatchMe"] = 12993362823,
                    ["Scenario"] = 14486394967,
                    ["SpeedDance"] = 13696910630,
                    ["Mickey Mouse Dance"] = 17513850642,
                    ["SmugDance"] = 14486336348,
                    ["IJustWannaDance"] = 13872712172,
                    ["A Little Bread"] = 18325622691,
                    ["CherryDance"] = 13872720636,
                    ["Stock Dancin"] = 15177954796,
                    ["Boppin"] = 14486340206,
                    ["Bunny Hop"] = 18325628382,
                    ["Sturdy2"] = 13592143109,
                    ["ShigureUiDance"] = 14969811713,
                    ["On the floor"] = 15192307042,
                    ["Dougie Dance"] = 17513857048,
                    ["Poke Dance"] = 17513854059,
                    ["Underneath The Tree"] = 15416326197,
                    ["JustGo"] = 14486343502,
                    ["Side to Side"] = 12993432864,
                    ["DefaultDance"] = 12992848429,
                    ["We Happy"] = 12993132263,
                    ["Pumpernickel"] = 12992881462,
                    ["AyeMan"] = 12993205713,
                    ["LegTwister"] = 12993325715,
                    ["Macarena"] = 12992463459,
                    ["Jung Justice"] = 12993064748,
                    ["Guitar"] = 12992788548,
                    ["Blues Clues"] = 12993568743,
                    ["Pon Pon"] = 12992690607,
                    ["Smooth Moves"] = 12992696073,
                    ["Slappa Dappa"] = 12992515489,
                    ["Reanimated"] = 12992858874,
                    ["Silly"] = 12992583689,
                    ["ImWinning"] = 12992413589,
                    ["GlitchedOut"] = 12993097815,
                    ["Slitherin"] = 12992874866,
                    ["LetsRock"] = 12992800469,
                    ["Samba2"] = 12993492084,
                    ["Calamity"] = 12992723009,
                    ["Dab"] = 12992738380,
                    ["SitUps"] = 12973940244,
                    ["Beg"] = 12981033755,
                    ["LeanSit"] = 12973730155,
                    ["Wryyy Pose"] = 15177958229,
                    ["Jumping Jacks"] = 12973049200,
                    ["Taunt"] = 12974197433,
                    ["Lay1"] = 12981946628,
                    ["SideLay"] = 12973742305,
                    ["LetsGo"] = 12973972241,
                    ["TakeTheL"] = 12992890179,
                    ["Square Up"] = 12981051256,
                    ["Kneel1"] = 12973757683,
                    ["The Voices"] = 12981003324,
                    ["Woah Woah Woah"] = 12981111999,
                    ["DoubleWave"] = 12974003029,
                    ["Where"] = 12973928238,
                    ["Monky"] = 12993166195,
                    ["Push Ups"] = 12973009418,
                    ["Spite"] = 12993158203,
                    ["Sit1"] = 12973715032,
                    ["Yawn"] = 12974021252,
                    ["Kneel2"] = 12981891054,
                    ["Lean"] = 12981904215,
                    ["Squats"] = 12973683060,
                    ["Hero Backflip"] = 12992762764,
                    ["T Pose"] = 12992979140,
                    ["Backflip"] = 12973697371,
                    ["DarnIt"] = 12973990539,
                    ["Sleep1"] = 12973772147,
                    ["BlingBling"] = 12992816303,
                    ["Fresh"] = 12992782229,
                    ["Flow"] = 12992151545,
                    ["RollOver"] = 12993103917,
                    ["Groovy"] = 12993125962,
                    ["Slick"] = 12993146695,
                    ["LegRaises"] = 12993302141,
                    ["Pony"] = 12992866294,
                    ["BillyBounce"] = 12993178627,
                    ["Uprock"] = 12993420438,
                    ["Maraschino"] = 12993291974,
                    ["Flapper"] = 12992755815,
                    ["Brooklyn"] = 12795700718,
                    ["CantDance"] = 12992631866,
                    ["OrangeJustice"] = 12992830553,
                    ["Zany"] = 12993199503,
                    ["Crackdown"] = 12992731029,
                    ["Bepop"] = 12993530370,
                    ["Luke"] = 12993221596,
                    ["Caramel"] = 12993118751,
                    ["HeadSpin"] = 12993370344,
                    ["Griddy"] = 12994084238,
                    ["Sans"] = 12992966286,
                    ["Hype"] = 12992823050,
                    ["Bobby"] = 12993069859,
                    ["Electro Shuffle"] = 12992743526,
                    ["Eagle"] = 12992749522,
                    ["Freestylin"] = 12992776034,
                    ["ElectroSwing"] = 12992808904,
                    ["Boogie Bomb"] = 12992713431,
                    ["PopLock"] = 12992840537,
                    ["Yeet"] = 12993183328,
                    ["Smug"] = 12993060513,
                    ["BellyDance"] = 12992236070,
                    ["Helicopter"] = 12984907623,
                    ["Salsa"] = 12992318087,
                    ["KatzotskyKick"] = 12993151887,
                    ["Worm"] = 12992916476,
                    ["Pogo"] = 12993137588,
                    ["Wavey"] = 12992274628,
                    ["Spooky"] = 12993142150,
                    ["Muffin"] = 12993051982,
                    ["Woop"] = 12991958176,
                    ["Peanut"] = 12993089266,
                    ["Fancy Feet"] = 12992927949,
                    ["Jinkies"] = 12993171877,
                    ["TPoseBoss"] = 12992983406,
                    ["ActivityClient"] = 13187374025
                  } 
        --[[local player = game:GetService("Players").LocalPlayer
        
        -- Function to find all Animation objects and their names
        local function findAllAnimationsInHierarchy(parent, animations)
            for _, child in pairs(parent:GetChildren()) do
                if child:IsA("Animation") then
                    -- Get the name using the specified path
                    local animationName = child.Parent and child.Parent.Parent and child.Parent.Parent.Parent and child.Parent.Parent.Parent.Parent.Name
                    table.insert(animations, {Name = animationName, Id = child.AnimationId})
                else
                    findAllAnimationsInHierarchy(child, animations)
                end
            end
        end
        
        -- Table to hold all found animations
        local animations = {}
        
        -- Start searching from PlayerGui
        findAllAnimationsInHierarchy(player.PlayerGui, animations)
        
        -- Prepare output string
        local output = {}
        
        if #animations > 0 then
            for _, animation in pairs(animations) do
                -- Extract only the numeric ID
                local id = string.match(animation.Id, "%d+")
                table.insert(output, string.format('["%s"] = %s', animation.Name, id))
            end
            
            -- Join the output into a single string
            local finalOutput = table.concat(output, "\n")
            
            -- Print the formatted output and set to clipboard
            print(finalOutput)
            setclipboard(finalOutput)
        else
            print("No animations found.")
        end
        ]]--
                  
                  -- Function to sort the animations table
                  local function sortAnimations(animTable)
                      local sortedAnimations = {}
                      
                      for name, id in pairs(animTable) do
                          table.insert(sortedAnimations, {name, id})
                      end
                      
                      table.sort(sortedAnimations, function(a, b)
                          return a[1] < b[1]
                      end)
                      
                      -- Create a new sorted table
                      local newSortedTable = {}
                      for _, v in ipairs(sortedAnimations) do
                          newSortedTable[v[1]] = v[2]
                      end
                      
                      return newSortedTable
                  end
        
                  -- Call the sort function
                  animations = sortAnimations(animations)
        
                  -- Create UI elements...
                  local LoganWS = Instance.new('Folder', game.CoreGui)
                  LoganWS.Name = 'LoganWS'
                  
                  local buttonHolder = Instance.new('Folder', LoganWS)
                  buttonHolder.Name = "Buttons"
                  
                  local Animations = Instance.new("ScreenGui")
                  local MainFrame = Instance.new("Frame")
                  local UIGradient = Instance.new("UIGradient")
                  local Title = Instance.new("TextLabel")
                  local SearchBox = Instance.new("TextBox")
                  local Container = Instance.new("ScrollingFrame")
                  local Button = Instance.new("TextButton")
                  local UIListLayout = Instance.new("UIListLayout")
                  local UIListLayout2 = Instance.new("UIListLayout")
                  local UIListLayout3 = Instance.new("UIListLayout")
                  local StopAnim = Instance.new("TextButton")
                  local PauseAnim = Instance.new("TextButton")
                  local ReplayAnim = Instance.new("TextButton")
                  local ReverseAnim = Instance.new("TextButton")
                  local Exit = Instance.new("TextButton")
                  local Mini = Instance.new("TextButton")
                  local titleFrame = Instance.new("Frame")
                  local slideFrame = Instance.new("Frame")
                  local SlideBar = Instance.new("Frame")
                  local SlideButton = Instance.new("TextButton")
                  local creds = Instance.new("TextLabel")
                  wait(0.3)
                  Animations.Name = "Animations"
                  Animations.Parent = plr:WaitForChild("PlayerGui")
                  
                  MainFrame.Name = "MainFrame"
                  MainFrame.Parent = Animations
                  MainFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  MainFrame.BorderColor3 = Color3.fromRGB(27, 42, 53)
                  MainFrame.BorderSizePixel = 0
                  MainFrame.Position = UDim2.new(0.4, 584, 0.2, -74)
                  MainFrame.Size = UDim2.new(0.135, 0, 0.6, 0)
                  
                  titleFrame.Name = "TitleFrame"
                  titleFrame.Parent = MainFrame
                  titleFrame.BorderSizePixel = 0
                  titleFrame.LayoutOrder = 0
                  titleFrame.BackgroundTransparency = 1
                  titleFrame.Size = UDim2.new(1, 0, 0.05, 0)
                  
                  slideFrame.Name = "SlideFrame"
                  slideFrame.Parent = MainFrame
                  slideFrame.BorderSizePixel = 0
                  slideFrame.LayoutOrder = 3
                  slideFrame.BackgroundTransparency = 1
                  slideFrame.Size = UDim2.new(1, 0, 0.05, 0)
                  
                  UIListLayout3.Parent = titleFrame
                  UIListLayout3.FillDirection = Enum.FillDirection.Horizontal
                  UIListLayout3.SortOrder = Enum.SortOrder.LayoutOrder
        
                  UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(102, 45, 113)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(102, 34, 103))}
                  UIGradient.Parent = MainFrame
                  
                  Title.Name = "Title"
                  Title.Parent = titleFrame
                  Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  Title.BackgroundTransparency = 1.000
                  Title.Size = UDim2.new(0.8, 0, 1, 0)
                  Title.Font = Enum.Font.GothamSemibold
                  Title.Text = "Emotes"
                  Title.TextColor3 = Color3.fromRGB(255, 255, 255)
                  Title.TextScaled = true
                  Title.TextSize = 14.000
                  Title.TextWrapped = true
                  Title.LayoutOrder = 0
                  
                  creds.Name = "Creds"
                  creds.Parent = MainFrame
                  creds.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  creds.BackgroundTransparency = 1.000
                  creds.Size = UDim2.new(1, 0, 0.05, 0)
                  creds.Font = Enum.Font.GothamSemibold
                  creds.Text = "By HaxterFelix"
                  creds.TextColor3 = Color3.fromRGB(255, 255, 255)
                  creds.TextScaled = true
                  creds.TextSize = 14.000
                  creds.TextWrapped = true
                  creds.LayoutOrder = 8
                  
                  SearchBox.Name = "SearchBox"
                  SearchBox.Parent = MainFrame
                  SearchBox.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  SearchBox.BackgroundTransparency = 0.750
                  SearchBox.BorderSizePixel = 0
                  SearchBox.Size = UDim2.new(1, 0, 0.045, 0)
                  SearchBox.Font = Enum.Font.GothamSemibold
                  SearchBox.PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
                  SearchBox.PlaceholderText = "Search bar..."
                  SearchBox.Text = ""
                  SearchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                  SearchBox.TextScaled = true
                  SearchBox.TextSize = 14.000
                  SearchBox.TextWrapped = true
                  SearchBox.LayoutOrder = 1
                  
                  Container.Name = "Container"
                  Container.Parent = MainFrame
                  Container.Active = true
                  Container.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  Container.BackgroundTransparency = 0.750
                  Container.BorderSizePixel = 0
                  Container.Size = UDim2.new(1, 0, 0.5, 0)
                  Container.ScrollBarThickness = 5
                  Container.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Left
                  Container.LayoutOrder = 2
                  
                  Button.Name = "Button"
                  Button.Parent = LoganWS
                  Button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  Button.BackgroundTransparency = 0.850
                  Button.BorderSizePixel = 0
                  Button.Size = UDim2.new(1, 0, 0, 38)
                  Button.Font = Enum.Font.GothamSemibold
                  Button.Text = "Test"
                  Button.TextColor3 = Color3.fromRGB(255, 255, 255)
                  Button.TextScaled = true
                  Button.TextSize = 14.000
                  Button.TextWrapped = true
                  
                  UIListLayout.Parent = Container
                  UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
                  UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                  UIListLayout.Padding = UDim.new(0, 5)
                  
                  UIListLayout2.Parent = MainFrame
                  UIListLayout2.HorizontalAlignment = Enum.HorizontalAlignment.Center
                  UIListLayout2.SortOrder = Enum.SortOrder.LayoutOrder
                  UIListLayout2.Padding = UDim.new(0, 5)
                  
                  ReverseAnim.Name = "ReverseAnim"
                  ReverseAnim.Parent = MainFrame
                  ReverseAnim.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  ReverseAnim.BackgroundTransparency = 0.750
                  ReverseAnim.BorderColor3 = Color3.fromRGB(27, 42, 53)
                  ReverseAnim.BorderSizePixel = 0
                  ReverseAnim.LayoutOrder = 4
                  ReverseAnim.Size = UDim2.new(0.85, 0, 0.06, 0)
                  ReverseAnim.Font = Enum.Font.GothamSemibold
                  ReverseAnim.Text = "Reverse animation"
                  ReverseAnim.TextColor3 = Color3.fromRGB(255, 255, 255)
                  ReverseAnim.TextScaled = true
                  ReverseAnim.TextSize = 14.000
                  ReverseAnim.TextWrapped = true
                  
                  StopAnim.Name = "StopAnim"
                  StopAnim.Parent = MainFrame
                  StopAnim.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  StopAnim.BackgroundTransparency = 0.750
                  StopAnim.BorderColor3 = Color3.fromRGB(27, 42, 53)
                  StopAnim.BorderSizePixel = 0
                  StopAnim.LayoutOrder = 5
                  StopAnim.Size = UDim2.new(0.85, 0, 0.06, 0)
                  StopAnim.Font = Enum.Font.GothamSemibold
                  StopAnim.Text = "Stop animation"
                  StopAnim.TextColor3 = Color3.fromRGB(255, 255, 255)
                  StopAnim.TextScaled = true
                  StopAnim.TextSize = 14.000
                  StopAnim.TextWrapped = true
                  
                  PauseAnim.Name = "PauseAnim"
                  PauseAnim.Parent = MainFrame
                  PauseAnim.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  PauseAnim.BackgroundTransparency = 0.750
                  PauseAnim.BorderColor3 = Color3.fromRGB(27, 42, 53)
                  PauseAnim.BorderSizePixel = 0
                  PauseAnim.Size = UDim2.new(0, 219, 0, 28)
                  PauseAnim.Font = Enum.Font.GothamSemibold
                  PauseAnim.Text = "Pause Game Animations"
                  PauseAnim.TextColor3 = Color3.fromRGB(255, 255, 255)
                  PauseAnim.TextScaled = true
                  PauseAnim.TextSize = 14.000
                  PauseAnim.TextWrapped = true
                  PauseAnim.LayoutOrder = 6
                  
                  ReplayAnim.Name = "ReplayAnim"
                  ReplayAnim.Parent = MainFrame
                  ReplayAnim.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  ReplayAnim.BackgroundTransparency = 0.750
                  ReplayAnim.BorderColor3 = Color3.fromRGB(27, 42, 53)
                  ReplayAnim.BorderSizePixel = 0
                  ReplayAnim.Size = UDim2.new(0, 219, 0, 28)
                  ReplayAnim.Font = Enum.Font.GothamSemibold
                  ReplayAnim.Text = "Replay Game Animations"
                  ReplayAnim.TextColor3 = Color3.fromRGB(255, 255, 255)
                  ReplayAnim.TextScaled = true
                  ReplayAnim.TextSize = 14.000
                  ReplayAnim.TextWrapped = true
                  ReplayAnim.LayoutOrder = 7
                  
                  Exit.Name = "Exit"
                  Exit.Parent = titleFrame
                  Exit.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  Exit.BackgroundTransparency = 1.000
                  Exit.Size = UDim2.new(0.1, 0, 0.7, 0)
                  Exit.Font = Enum.Font.GothamSemibold
                  Exit.Text = "X"
                  Exit.TextColor3 = Color3.fromRGB(255, 255, 255)
                  Exit.TextScaled = true
                  Exit.TextSize = 14.000
                  Exit.TextWrapped = true
                  Exit.LayoutOrder = 2
                  
                  Mini.Name = "Mini"
                  Mini.Parent = titleFrame
                  Mini.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  Mini.BackgroundTransparency = 1.000
                  Mini.Size = UDim2.new(0.1, 0, 0.7, 0)
                  Mini.Font = Enum.Font.GothamSemibold
                  Mini.Text = "-"
                  Mini.TextColor3 = Color3.fromRGB(255, 255, 255)
                  Mini.TextScaled = true
                  Mini.TextSize = 14.000
                  Mini.TextWrapped = true
                  Mini.LayoutOrder = 1
                  
                  SlideBar.Name = "SlideBar"
                  SlideBar.Parent = slideFrame
                  SlideBar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                  SlideBar.BackgroundTransparency = 0.750
                  SlideBar.BorderSizePixel = 0
                  SlideBar.Size = UDim2.new(1, 0, 0.3, 0)
                  SlideBar.AnchorPoint = Vector2.new(0.5,0.5)
                  SlideBar.Position = UDim2.new(0.5,0,0.5,0)
                  
                  
                  SlideButton.Name = "SlideButton"
                  SlideButton.Parent = SlideBar
                  SlideButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                  SlideButton.BorderSizePixel = 0
                  SlideButton.Position = UDim2.new(0.5, 0, -1.5, 0)
                  SlideButton.Size = UDim2.new(0, 10, 0, 26)
                  SlideButton.Font = Enum.Font.SourceSans
                  SlideButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                  SlideButton.TextSize = 14.000
                  SlideButton.TextTransparency = 1.000
                  
                  MainFrame.Active = true
                  MainFrame.Draggable = true
                  
                  local LayOut = 0
                  local CurrentAni = nil
                  local neg = false
                  
                  
                  function StopAnims()
                  for _,v in pairs(animations) do
                    v:Stop()
                  end
                  end
                  wait(0.4)
                  function LoadAnims()
                  for i,v in pairs(animations) do
                    local Anim = Instance.new("Animation", LoganWS)
                    Anim.AnimationId = "rbxassetid://"..v
                    animations[i] = plr.Character.Humanoid:LoadAnimation(Anim)
                    CreateButton(i)
                  end
                  end
                  
                  function Snap(number, factor)
                  if factor == 0 then
                    return number
                  else
                    return math.floor(number/factor+0.5)*factor
                  end
                  end
                  
                  function AutoScale()
                  local number = (#Container:GetChildren()-1)*38
                  number = number + (#Container:GetChildren()-1)*5
                  Container.CanvasSize = UDim2.new(0,0,0,number)
                  end
                  
                  
                  
                  function CreateButton(AnimationName)
                  local ButtonClone = Button:Clone()
                  ButtonClone.LayoutOrder = LayOut
                  LayOut = LayOut + 1
                  ButtonClone.Parent = buttonHolder
                  ButtonClone.Name = AnimationName
                  ButtonClone.Text = AnimationName
                  ButtonClone.MouseButton1Click:Connect(function()
                    StopAnims()
                    CurrentAni = animations[ButtonClone.Name]
                    CurrentAni:Play()
                  end)
                  end
                  
                  function FindAnim() 
                  local text = string.lower(SearchBox.Text)
                  if SearchBox.Text == "" or SearchBox.Text == nil then
                    for _,v in pairs(buttonHolder:GetChildren()) do
                      v.Parent = Container
                    end
                  else
                    for i,v in pairs(buttonHolder:GetChildren()) do
                      if string.find(string.lower(v.Name), text) then
                        v.Parent = Container
                      end
                    end
                    for i,v in pairs(Container:GetChildren()) do
                      if not string.find(string.lower(v.Name), text) and v.Name ~= "UIListLayout" then
                        v.Parent = buttonHolder
                      end
                    end
                  end
                  end
                  
                  ReverseAnim.MouseButton1Click:Connect(function()
                  neg = not neg
                  end)
                  StopAnim.MouseButton1Click:Connect(StopAnims)
                  PauseAnim.MouseButton1Click:Connect(function()
                  plr.Character.Animate.Disabled = true
                  end)
                  ReplayAnim.MouseButton1Click:Connect(function()
                  plr.Character.Animate.Disabled = false
                  end)
                  
                  local TS = game:GetService("TweenService")
                  local tweenclose = TS:Create(MainFrame, TweenInfo.new(1), {Size = UDim2.new(0.135, 0, 0.03, 0)})
                  local tweenclose2 = TS:Create(titleFrame, TweenInfo.new(1), {Size = UDim2.new(1, 0, 1, 0)})
                  local tweenopen = TS:Create(MainFrame, TweenInfo.new(1), {Size = UDim2.new(0.135, 0, 0.6, 0)})
                  local tweenopen2 = TS:Create(titleFrame, TweenInfo.new(1), {Size = UDim2.new(1, 0, 0.05, 0)})
                  local open = true
                  Mini.MouseButton1Click:Connect(function()
                  if open then
                    Mini.Text = "o"
                    for _,v in pairs(MainFrame:GetChildren()) do
                      if v.Name ~= titleFrame.Name and not string.find(v.Name, "UI") then
                        v.Visible = false
                      end
                    end
                    tweenclose:Play()
                    tweenclose2:Play()
                  else
                    Mini.Text = "-"
                    for _,v in pairs(MainFrame:GetChildren()) do
                      if not string.find(v.Name, "UI") then
                        v.Visible = true
                      end
                    end
                    tweenopen:Play()
                    tweenopen2:Play()
                  end
                  open = not open
                  end)
                  
                  LoadAnims()
    
                  local held = false
                  SlideButtonPos = SlideButton.Position
                  local UIS = game:GetService("UserInputService")
                  local RuS = game:GetService("RunService")
                  local step = 0.01
                  local percentage = 0
                  
                  UIS.InputEnded:connect(function(input, processed)
                  if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    held = false
                  end
                  end)
                  
                  SlideButton.MouseButton1Down:Connect(function()
                  held = true
                  end)
                  
                  local con = RuS.RenderStepped:connect(function()
                  if held then
                    local MousePos = UIS:GetMouseLocation().X
                    local BtnPos = SlideButton.Position
                    local SliderSize = SlideBar.AbsoluteSize.X
                    local SliderPos = SlideBar.AbsolutePosition.X
                    local pos = Snap((MousePos-SliderPos)/SliderSize,step)
                    percentage = math.clamp(pos,0,0.96)
                    SlideButton.Position = UDim2.new(percentage,0,BtnPos.Y.Scale, BtnPos.Y.Offset)
                  end
                  local axis = SlideButton.Position.X.Scale*2
                  if neg then
                    axis = -axis
                  end
                  if CurrentAni ~= nil then
                    CurrentAni:AdjustSpeed(axis)
                  end
                  FindAnim()
                  AutoScale()
                  end)
                  
                  Exit.MouseButton1Click:Connect(function()
                  StopAnims()
                  plr.Character.Animate.Disabled = false
                  Animations:Destroy()
                  LoganWS:Destroy()
                  con:Disconnect()
                  end)
                  end
                  end
        end)
        Universal:CreateButton("VC Unban", function()
            game:GetService("VoiceChatService"):joinVoice()
        end)
        local IdleAnimations = {
            {Name = "Wicked Popular Idle", ID1 = "http://www.roblox.com/asset/?id=118832222982049", ID2 = "http://www.roblox.com/asset/?id=76049494037641"},
            {Name = "Catwalk Glam Idle", ID1 = "http://www.roblox.com/asset/?id=133806214992291", ID2 = "http://www.roblox.com/asset/?id=94970088341563"},
            {Name = "NFL Animation Idle", ID1 = "http://www.roblox.com/asset/?id=92080889861410", ID2 = "http://www.roblox.com/asset/?id=74451233229259"},
            {Name = "Bold Animation Idle", ID1 = "http://www.roblox.com/asset/?id=16738333868", ID2 = "http://www.roblox.com/asset/?id=16738334710"},
            {Name = "Adidas Sports Idle", ID1 = "http://www.roblox.com/asset/?id=18537376492", ID2 = "http://www.roblox.com/asset/?id=18537371272"},
            {Name = "No Boundaries Idle", ID1 = "http://www.roblox.com/asset/?id=18747067405", ID2 = "http://www.roblox.com/asset/?id=18747063918"},
            {Name = "Vampire Idle", ID1 = "http://www.roblox.com/asset/?id=1083445855", ID2 = "http://www.roblox.com/asset/?id=1083450166"},
            {Name = "Hero Idle", ID1 = "http://www.roblox.com/asset/?id=616111295", ID2 = "http://www.roblox.com/asset/?id=616113536"},
            {Name = "Zombie Idle", ID1 = "http://www.roblox.com/asset/?id=616158929", ID2 = "http://www.roblox.com/asset/?id=616160636"},
            {Name = "Mage Idle", ID1 = "http://www.roblox.com/asset/?id=707742142", ID2 = "http://www.roblox.com/asset/?id=707855907"},
            {Name = "Levitation Idle", ID1 = "http://www.roblox.com/asset/?id=616006778", ID2 = "http://www.roblox.com/asset/?id=616008087"},
            {Name = "Elder Idle", ID1 = "http://www.roblox.com/asset/?id=845397899", ID2 = "http://www.roblox.com/asset/?id=845400520"},
            {Name = "Astronaut Idle", ID1 = "http://www.roblox.com/asset/?id=891621366", ID2 = "http://www.roblox.com/asset/?id=891633237"},
            {Name = "Ninja Idle", ID1 = "http://www.roblox.com/asset/?id=656117400", ID2 = "http://www.roblox.com/asset/?id=656118341"},
            {Name = "Werewolf Idle", ID1 = "http://www.roblox.com/asset/?id=1083195517", ID2 = "http://www.roblox.com/asset/?id=1083214717"},
            {Name = "Cartoon Idle", ID1 = "http://www.roblox.com/asset/?id=742637544", ID2 = "http://www.roblox.com/asset/?id=742638445"},
            {Name = "Pirate Idle", ID1 = "http://www.roblox.com/asset/?id=750781874", ID2 = "http://www.roblox.com/asset/?id=750782770"},
            {Name = "Sneaky Idle", ID1 = "http://www.roblox.com/asset/?id=1132473842", ID2 = "http://www.roblox.com/asset/?id=1132477671"},
            {Name = "Toy Idle", ID1 = "http://www.roblox.com/asset/?id=782841498", ID2 = "http://www.roblox.com/asset/?id=782845736"},
            {Name = "Knight Idle", ID1 = "http://www.roblox.com/asset/?id=657595757", ID2 = "http://www.roblox.com/asset/?id=657568135"},
            {Name = "Confident Idle", ID1 = "http://www.roblox.com/asset/?id=1069977950", ID2 = "http://www.roblox.com/asset/?id=1069987858"},
            {Name = "PopStar Idle", ID1 = "http://www.roblox.com/asset/?id=1212900985", ID2 = "http://www.roblox.com/asset/?id=1212900985"},
            {Name = "Princess Idle", ID1 = "http://www.roblox.com/asset/?id=941003647", ID2 = "http://www.roblox.com/asset/?id=941013098"},
            {Name = "Cowboy Idle", ID1 = "http://www.roblox.com/asset/?id=1014390418", ID2 = "http://www.roblox.com/asset/?id=1014398616"},
            {Name = "Patrol Idle", ID1 = "http://www.roblox.com/asset/?id=1149612882", ID2 = "http://www.roblox.com/asset/?id=1150842221"},
            {Name = "Edited Zombie Idle", ID1 = "http://www.roblox.com/asset/?id=3489171152", ID2 = "http://www.roblox.com/asset/?id=3489171152"},
        }
        local function StopAnim()
            plr.Character.Animate.Disabled = false
            local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
            for _, track in pairs(animtrack) do
                track:Stop()
            end
        end
    
        local IdleList = {}
    
    
        for _, anim in ipairs(IdleAnimations) do
            table.insert(IdleList, anim.Name)
        end
    
        local selectedAnimID1, selectedAnimID2
    
        local dropdown = Animations:CreateDropdown("Animations", IdleList, function(CurrentIdleOption)
            local function StopAnim()
                plr.Character.Animate.Disabled = false
                local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
                for _, track in pairs(animtrack) do
                    track:Stop()
                end
            end
    
            StopAnim()
            plr.Character.Animate.Disabled = true
    
    
            for _, anim in ipairs(IdleAnimations) do
                if anim.Name == CurrentIdleOption then
                    selectedAnimID1 = anim.ID1
                    selectedAnimID2 = anim.ID2
                    break
                end
            end
    
    
            plr.Character.Animate.idle.Animation1.AnimationId = selectedAnimID1
            plr.Character.Animate.idle.Animation2.AnimationId = selectedAnimID2
            plr.Character.Animate.Disabled = false
            plr.Character.Humanoid:ChangeState(3)
    
    
        end)
    
        Animations:CreateToggle("Auto Idle", function(AutoIdle)
            getgenv().AutoIdles = AutoIdle
    
    
            local function onCharacterAdded(character)
                if selectedAnimID1 and selectedAnimID2 then
                    if not (character.Animate.idle.Animation1.AnimationId == selectedAnimID1 or 
                             character.Animate.idle.Animation2.AnimationId == selectedAnimID2) then
                        StopAnim()
                        character.Animate.idle.Animation1.AnimationId = selectedAnimID1
                        character.Animate.idle.Animation2.AnimationId = selectedAnimID2
                        character.Animate.Disabled = false
                        character.Humanoid:ChangeState(3)
                    end
                end
            end
    
    
            plr.CharacterAdded:Connect(onCharacterAdded)
    
    
            if plr.Character then
                onCharacterAdded(plr.Character)
            end
    
            while true do
                wait(0)
                if not getgenv().AutoIdles then
                    _G.AutoIdlesss = false
                    return
                end
    
                _G.AutoIdlesss = true
                local AutoIdlessss = nil
    
                AutoIdlessss = RunService.Stepped:Connect(function()
                    task.spawn(function()
                        if selectedAnimID1 and selectedAnimID2 then
                            if plr.Character then
                                if not (plr.Character.Animate.idle.Animation1.AnimationId == selectedAnimID1 or 
                                         plr.Character.Animate.idle.Animation2.AnimationId == selectedAnimID2) then
                                    StopAnim()
                                    plr.Character.Animate.idle.Animation1.AnimationId = selectedAnimID1
                                    plr.Character.Animate.idle.Animation2.AnimationId = selectedAnimID2
                                    plr.Character.Animate.Disabled = false
                                    plr.Character.Humanoid:ChangeState(3)
                                end
                            end
                        end
                    end)
                end)
    
                repeat task.wait() until _G.AutoIdlesss == false
                AutoIdlessss:Disconnect()
            end
        end)
    
    
    
    
    
        local WalkAnimations = {
            {Name = "Wicked Walk", ID = "http://www.roblox.com/asset/?id=92072849924640"},
            {Name = "Catwalk Glam Walk", ID = "http://www.roblox.com/asset/?id=109168724482748"},
            {Name = "NFL Walk", ID = "http://www.roblox.com/asset/?id=110358958299415"},
            {Name = "Bold Walk", ID = "http://www.roblox.com/asset/?id=16738340646"},
            {Name = "Adidas Sports Walk", ID = "http://www.roblox.com/asset/?id=18537392113"},
            {Name = "No Boundaries Walk", ID = "http://www.roblox.com/asset/?id=18747074203"},
            {Name = "Vampire Walk", ID = "http://www.roblox.com/asset/?id=1083473930"},
            {Name = "Hero Walk", ID = "http://www.roblox.com/asset/?id=616122287"},
            {Name = "Zombie Walk", ID = "http://www.roblox.com/asset/?id=616168032"},
            {Name = "Mage Walk", ID = "http://www.roblox.com/asset/?id=707897309"},
            {Name = "Levitation Walk", ID = "http://www.roblox.com/asset/?id=616010382"}, 
            {Name = "Elder Walk", ID = "http://www.roblox.com/asset/?id=845403856"}, 
            {Name = "Astronaut Walk", ID = "http://www.roblox.com/asset/?id=891667138"},
            {Name = "Ninja Walk", ID = "http://www.roblox.com/asset/?id=656121766"},
            {Name = "Werewolf Walk", ID = "http://www.roblox.com/asset/?id=1083178339"},
            {Name = "Cartoon Walk", ID = "http://www.roblox.com/asset/?id=742640026"},
            {Name = "Pirate Walk", ID = "http://www.roblox.com/asset/?id=750785693"},
            {Name = "Sneaky Walk", ID = "http://www.roblox.com/asset/?id=1132510133"},
            {Name = "Toy Walk", ID = "http://www.roblox.com/asset/?id=782843345"},
            {Name = "Knight Walk", ID = "http://www.roblox.com/asset/?id=657552124"},
            {Name = "Confident Walk", ID = "http://www.roblox.com/asset/?id=1070017263"},
            {Name = "PopStar Walk", ID = "http://www.roblox.com/asset/?id=1212980338"},
            {Name = "Princess Walk", ID = "http://www.roblox.com/asset/?id=941028902"},
            {Name = "Cowboy Walk", ID = "http://www.roblox.com/asset/?id=1014421541"},
            {Name = "Patrol Walk", ID = "http://www.roblox.com/asset/?id=1151231493"},
            {Name = "Edited Zombie Walk", ID = "http://www.roblox.com/asset/?id=3489174223"},
        }
    
    
        local WalkList = {}
    
    
        for _, anim in ipairs(WalkAnimations) do
            table.insert(WalkList, anim.Name)
        end
    
        local selectedAnimID
    
        local dropdown = Animations:CreateDropdown("Walk Animations", WalkList, function(CurrentWalkOption)
            local function StopAnim()
                plr.Character.Animate.Disabled = false
                local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
                for _, track in pairs(animtrack) do
                    track:Stop()
                end
            end
    
            StopAnim()
            plr.Character.Animate.Disabled = true
    
    
            for _, anim in ipairs(WalkAnimations) do
                if anim.Name == CurrentWalkOption then
                    selectedAnimID = anim.ID
                    break
                end
            end
    
    
            plr.Character.Animate.walk.WalkAnim.AnimationId = selectedAnimID
            plr.Character.Animate.run.RunAnim.AnimationId = selectedAnimID 
            plr.Character.Animate.Disabled = false
        end)
    
        Animations:CreateToggle("Auto Walk", function(AutoWalk)
            getgenv().AutoWalks = AutoWalk
    
    
            local function onCharacterAdded(character)
                local humanoid = character:WaitForChild("Humanoid")
    
    
                if humanoid then
                    if character.Animate.idle.Animation1.AnimationId ~= selectedAnimID then
                        character.Animate.walk.WalkAnim.AnimationId = selectedAnimID
                    end
                end
            end
    
    
            plr.CharacterAdded:Connect(onCharacterAdded)
        
    
            if plr.Character then
                onCharacterAdded(plr.Character)
            end
    
            while true do
                wait(0)
                if not getgenv().AutoWalks then
                    _G.AutoWalks = false
                    return
                end
    
                _G.AutoWalks = true
                local AutoWalkConnection = nil
    
                AutoWalkConnection = RunService.Stepped:Connect(function()
                    task.spawn(function()
                        if plr.Character then
                            if selectedAnimID then
                                if not (plr.Character.Animate.idle.Animation1.AnimationId == selectedAnimID) then
                                    plr.Character.Animate.walk.WalkAnim.AnimationId = selectedAnimID
                                end
                            end
                        end
                    end)
                end)
    
                repeat task.wait() until _G.AutoWalks == false
                AutoWalkConnection:Disconnect()
            end
        end)
        local RunAnimations = {
            {Name = "Wicked Run", ID = "http://www.roblox.com/asset/?id=72301599441680"},
            {Name = "Catwalk Glam Run", ID = "http://www.roblox.com/asset/?id=117333533048078"},
            {Name = "NFL Run", ID = "http://www.roblox.com/asset/?id=117333533048078"},
            {Name = "Bold Run", ID = "http://www.roblox.com/asset/?id=16738337225"},
            {Name = "Adidas Sports Run", ID = "http://www.roblox.com/asset/?id=18537384940"},
            {Name = "No Boundaries Run", ID = "http://www.roblox.com/asset/?id=18747070484"},
            {Name = "Vampire Run", ID = "http://www.roblox.com/asset/?id=1083462077"},
            {Name = "Hero Run", ID = "http://www.roblox.com/asset/?id=616117076"},
            {Name = "Zombie Run", ID = "http://www.roblox.com/asset/?id=616163682"},
            {Name = "Mage Run", ID = "http://www.roblox.com/asset/?id=707861613"},
            {Name = "Levitation Run", ID = "http://www.roblox.com/asset/?id=616013216"}, 
            {Name = "Elder Run", ID = "http://www.roblox.com/asset/?id=845386501"}, 
            {Name = "Astronaut Run", ID = "http://www.roblox.com/asset/?id=891636393"},
            {Name = "Ninja Run", ID = "http://www.roblox.com/asset/?id=656118852"},
            {Name = "Werewolf Run", ID = "http://www.roblox.com/asset/?id=1083216690"},
            {Name = "Cartoon Run", ID = "http://www.roblox.com/asset/?id=742638842"},
            {Name = "Pirate Run", ID = "http://www.roblox.com/asset/?id=750783738"},
            {Name = "Sneaky Run", ID = "http://www.roblox.com/asset/?id=1132494274"},
            {Name = "Toy Run", ID = "http://www.roblox.com/asset/?id=782842708"},
            {Name = "Knight Run", ID = "http://www.roblox.com/asset/?id=657564596"},
            {Name = "Confident Run", ID = "http://www.roblox.com/asset/?id=1070001516"},
            {Name = "PopStar Run", ID = "http://www.roblox.com/asset/?id=1212980348"},
            {Name = "Princess Run", ID = "http://www.roblox.com/asset/?id=941015281"},
            {Name = "Cowboy Run", ID = "http://www.roblox.com/asset/?id=1014401683"},
            {Name = "Patrol Run", ID = "http://www.roblox.com/asset/?id=1150967949"},
            {Name = "Edited Zombie Run", ID = "http://www.roblox.com/asset/?id=3489173414"},
        }
    
        local RunList = {}
    
    
        for _, anim in ipairs(RunAnimations) do
            table.insert(RunList, anim.Name)
        end
    
        local selectedRunAnimID
    
        local dropdown = Animations:CreateDropdown("Run Animations", RunList, function(CurrentRunOption)
            local function StopAnim()
                plr.Character.Animate.Disabled = false
                local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
                for _, track in pairs(animtrack) do
                    track:Stop()
                end
            end
    
            StopAnim()
            plr.Character.Animate.Disabled = true
    
    
            for _, anim in ipairs(RunAnimations) do
                if anim.Name == CurrentRunOption then
                    selectedRunAnimID = anim.ID
                    break
                end
            end
    
    
            plr.Character.Animate.run.RunAnim.AnimationId = selectedRunAnimID
            plr.Character.Animate.Disabled = false
    
        end)
    
        Animations:CreateToggle("Auto Run", function(AutoRun)
            getgenv().AutoRuns = AutoRun
    
    
            local function onCharacterAdded(character)
                local humanoid = character:WaitForChild("Humanoid")
    
    
                if humanoid then
                    if character.Animate.idle.Animation1.AnimationId ~= selectedRunAnimID then
                        character.Animate.run.RunAnim.AnimationId = selectedRunAnimID
                    end
                end
            end
    
    
            plr.CharacterAdded:Connect(onCharacterAdded)
    
    
            if plr.Character then
                onCharacterAdded(plr.Character)
            end
    
            while true do
                wait(0)
                if not getgenv().AutoRuns then
                    _G.AutoRuns = false
                    return
                end
    
                _G.AutoRuns = true
                local AutoRunConnection = nil
    
                AutoRunConnection = RunService.Stepped:Connect(function()
                    task.spawn(function()
                        if plr.Character then
                            if selectedRunAnimID then
                                if not (plr.Character.Animate.idle.Animation1.AnimationId == selectedRunAnimID) then
                                    plr.Character.Animate.run.RunAnim.AnimationId = selectedRunAnimID
                                end
                            end
                        end
                    end)
                end)
    
                repeat task.wait() until _G.AutoRuns == false
                AutoRunConnection:Disconnect()
            end
        end)
    
        local JumpAnimations = {
            {Name = "Wicked Jump", ID = "http://www.roblox.com/asset/?id=104325245285198"},
            {Name = "Catwalk Glam Jump", ID = "http://www.roblox.com/asset/?id=116936326516985"},
            {Name = "NFL Jump", ID = "http://www.roblox.com/asset/?id=119846112151352"},
            {Name = "Bold Jump", ID = "http://www.roblox.com/asset/?id=16738336650"},
            {Name = "Adidas Sports Jump", ID = "http://www.roblox.com/asset/?id=18537380791"},
            {Name = "No Boundaries Jump", ID = "http://www.roblox.com/asset/?id=18747069148"},
            {Name = "Vampire Jump", ID = "http://www.roblox.com/asset/?id=1083455352"},
            {Name = "Hero Jump", ID = "http://www.roblox.com/asset/?id=616115533"},
            {Name = "Zombie Jump", ID = "http://www.roblox.com/asset/?id=616161997"},
            {Name = "Mage Jump", ID = "http://www.roblox.com/asset/?id=707853694"},
            {Name = "Levitation Jump", ID = "http://www.roblox.com/asset/?id=616008936"}, 
            {Name = "Elder Jump", ID = "http://www.roblox.com/asset/?id=845398858"}, 
            {Name = "Astronaut Jump", ID = "http://www.roblox.com/asset/?id=891627522"},
            {Name = "Ninja Jump", ID = "http://www.roblox.com/asset/?id=656117878"},
            {Name = "Werewolf Jump", ID = "http://www.roblox.com/asset/?id=1083218792"},
            {Name = "Cartoon Jump", ID = "http://www.roblox.com/asset/?id=742638842"},
            {Name = "Pirate Jump", ID = "http://www.roblox.com/asset/?id=750782230"},
            {Name = "Sneaky Jump", ID = "http://www.roblox.com/asset/?id=1132489853"},
            {Name = "Toy Jump", ID = "http://www.roblox.com/asset/?id=782847020"},
            {Name = "Knight Jump", ID = "http://www.roblox.com/asset/?id=658409194"},
            {Name = "Confident Jump", ID = "http://www.roblox.com/asset/?id=1069984524"},
            {Name = "PopStar Jump", ID = "http://www.roblox.com/asset/?id=1212954642"},
            {Name = "Princess Jump", ID = "http://www.roblox.com/asset/?id=941008832"},
            {Name = "Cowboy Jump", ID = "http://www.roblox.com/asset/?id=1014394726"},
            {Name = "Patrol Jump", ID = "http://www.roblox.com/asset/?id=1150944216"},
            {Name = "Edited Zombie Jump", ID = "http://www.roblox.com/asset/?id=616161997"},
        }
    
        local JumpList = {}
    
    
        for _, anim in ipairs(JumpAnimations) do
            table.insert(JumpList, anim.Name)
        end
    
        local selectedJumpAnimID
    
        local dropdown = Animations:CreateDropdown("Jump Animations", JumpList, function(CurrentJumpOption)
            local function StopAnim()
                plr.Character.Animate.Disabled = false
                local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
                for _, track in pairs(animtrack) do
                    track:Stop()
                end
            end
    
            StopAnim()
            plr.Character.Animate.Disabled = true
    
    
            for _, anim in ipairs(JumpAnimations) do
                if anim.Name == CurrentJumpOption then
                    selectedJumpAnimID = anim.ID
                    break
                end
            end
    
    
            plr.Character.Animate.jump.JumpAnim.AnimationId = selectedJumpAnimID
            plr.Character.Animate.Disabled = false
    
        end)
    
        Animations:CreateToggle("Auto Jump", function(AutoJump)
            getgenv().AutoJumps = AutoJump
    
    
            local function onCharacterAdded(character)
                local humanoid = character:WaitForChild("Humanoid")
    
    
                if humanoid then
                    if character.Animate.idle.Animation1.AnimationId ~= selectedJumpAnimID then
                        character.Animate.jump.JumpAnim.AnimationId = selectedJumpAnimID
                    end
                end
            end
    
    
            plr.CharacterAdded:Connect(onCharacterAdded)
    
    
            if plr.Character then
                onCharacterAdded(plr.Character)
            end
    
            while true do
                wait(0)
                if not getgenv().AutoJumps then
                    _G.AutoJumps = false
                    return
                end
    
                _G.AutoJumps = true
                local AutoJumpConnection = nil
    
                AutoJumpConnection = RunService.Stepped:Connect(function()
                    task.spawn(function()
                        if plr.Character then
                            if selectedJumpAnimID then
                                if not (plr.Character.Animate.idle.Animation1.AnimationId == selectedJumpAnimID) then
                                    plr.Character.Animate.jump.JumpAnim.AnimationId = selectedJumpAnimID
                                end
                            end
                        end
                    end)
                end)
    
                repeat task.wait() until _G.AutoJumps == false
                AutoJumpConnection:Disconnect()
            end
        end)
    
        local ClimbAnimations = {
            {Name = "Wicked Climb", ID = "http://www.roblox.com/asset/?id=131326830509784"},
            {Name = "Catwalk Glam Climb", ID = "http://www.roblox.com/asset/?id=119377220967554"},
            {Name = "NFL Climb", ID = "http://www.roblox.com/asset/?id=134630013742019"},
            {Name = "Bold Climb", ID = "http://www.roblox.com/asset/?id=16738332169"},
            {Name = "Adidas Sports Climb", ID = "http://www.roblox.com/asset/?id=18537363391"},
            {Name = "No Boundaries Climb", ID = "http://www.roblox.com/asset/?id=18747060903"},
            {Name = "Vampire Climb", ID = "http://www.roblox.com/asset/?id=1083439238"},
            {Name = "Hero Climb", ID = "http://www.roblox.com/asset/?id=616104706"},
            {Name = "Zombie Climb", ID = "http://www.roblox.com/asset/?id=616156119"},
            {Name = "Mage Climb", ID = "http://www.roblox.com/asset/?id=707826056"},
            {Name = "Levitation Climb", ID = "http://www.roblox.com/asset/?id=616003713"}, 
            {Name = "Elder Climb", ID = "http://www.roblox.com/asset/?id=845392038"}, 
            {Name = "Astronaut Climb", ID = "http://www.roblox.com/asset/?id=891609353"},
            {Name = "Ninja Climb", ID = "http://www.roblox.com/asset/?id=656114359"},
            {Name = "Werewolf Climb", ID = "http://www.roblox.com/asset/?id=1083182000"},
            {Name = "Cartoon Climb", ID = "http://www.roblox.com/asset/?id=742636889"},
            {Name = "Pirate Climb", ID = "http://www.roblox.com/asset/?id=750779899"},
            {Name = "Sneaky Climb", ID = "http://www.roblox.com/asset/?id=1132461372"},
            {Name = "Toy Climb", ID = "http://www.roblox.com/asset/?id=782843869"},
            {Name = "Knight Climb", ID = "http://www.roblox.com/asset/?id=658360781"},
            {Name = "Confident Climb", ID = "http://www.roblox.com/asset/?id=1069946257"},
            {Name = "PopStar Climb", ID = "http://www.roblox.com/asset/?id=1213044953"},
            {Name = "Princess Climb", ID = "http://www.roblox.com/asset/?id=940996062"},
            {Name = "Cowboy Climb", ID = "http://www.roblox.com/asset/?id=1014380606"},
            {Name = "Patrol Climb", ID = "http://www.roblox.com/asset/?id=1148811837"},
            {Name = "Edited Zombie Climb", ID = "http://www.roblox.com/asset/?id=616156119"},
        }
    
        local ClimbList = {}
    
    
        for _, anim in ipairs(ClimbAnimations) do
            table.insert(ClimbList, anim.Name)
        end
    
        local selectedClimbAnimID
    
        local dropdown = Animations:CreateDropdown("Climb Animations", ClimbList, function(CurrentClimbOption)
            local function StopAnim()
                plr.Character.Animate.Disabled = false
                local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
                for _, track in pairs(animtrack) do
                    track:Stop()
                end
            end
    
            StopAnim()
            plr.Character.Animate.Disabled = true
    
    
            for _, anim in ipairs(ClimbAnimations) do
                if anim.Name == CurrentClimbOption then
                    selectedClimbAnimID = anim.ID
                    break
                end
            end
    
    
            plr.Character.Animate.climb.ClimbAnim.AnimationId = selectedClimbAnimID
            plr.Character.Animate.Disabled = false
    
        end)
    
        Animations:CreateToggle("Auto Climb", function(AutoClimb)
            getgenv().AutoClimbs = AutoClimb
    
    
            local function onCharacterAdded(character)
                local humanoid = character:WaitForChild("Humanoid")
    
    
                if humanoid then
                        if character.Animate.idle.Animation1.AnimationId ~= selectedClimbAnimID then
                            character.Animate.climb.ClimbAnim.AnimationId = selectedClimbAnimID
                        end
                    end
                end
    
            
            plr.CharacterAdded:Connect(onCharacterAdded)
    
            
            if plr.Character then
                onCharacterAdded(plr.Character)
            end
    
            if not getgenv().AutoClimbs then
                _G.AutoClimbs = false
                return
            end
    
            _G.AutoClimbs = true
    
            local AutoClimbConnection = nil
    
            AutoClimbConnection = RunService.Stepped:Connect(function()
                task.spawn(function()
                    if plr.Character then
                        if selectedClimbAnimID then
                            if not (plr.Character.Animate.idle.Animation1.AnimationId == selectedClimbAnimID) then
                                plr.Character.Animate.climb.ClimbAnim.AnimationId = selectedClimbAnimID
                            end
                        end
                    end
                end)
            end)
    
            repeat task.wait() until _G.AutoClimbs == false
            AutoClimbConnection:Disconnect()
        end)
    
    
        local FallAnimations = {
            {Name = "Wicked Fall", ID = "http://www.roblox.com/asset/?id=121152442762481"},
            {Name = "Catwalk Glam Fall", ID = "http://www.roblox.com/asset/?id=92294537340807"},
            {Name = "NFL Fall", ID = "http://www.roblox.com/asset/?id=129773241321032"},
            {Name = "Bold Fall", ID = "http://www.roblox.com/asset/?id=16738333171"},
            {Name = "Adidas Sports Fall", ID = "http://www.roblox.com/asset/?id=18537367238"},
            {Name = "No Boundaries Fall", ID = "http://www.roblox.com/asset/?id=18747062535"},
            {Name = "Vampire Fall", ID = "http://www.roblox.com/asset/?id=1083443587"},
            {Name = "Hero Fall", ID = "http://www.roblox.com/asset/?id=616108001"},
            {Name = "Zombie Fall", ID = "http://www.roblox.com/asset/?id=616157476"},
            {Name = "Mage Fall", ID = "http://www.roblox.com/asset/?id=707829716"},
            {Name = "Levitation Fall", ID = "http://www.roblox.com/asset/?id=616005863"},
            {Name = "Elder Fall", ID = "http://www.roblox.com/asset/?id=845396048"},
            {Name = "Astronaut Fall", ID = "http://www.roblox.com/asset/?id=891617961"},
            {Name = "Ninja Fall", ID = "http://www.roblox.com/asset/?id=656115606"},
            {Name = "Werewolf Fall", ID = "http://www.roblox.com/asset/?id=1083189019"},
            {Name = "Cartoon Fall", ID = "http://www.roblox.com/asset/?id=742637151"},
            {Name = "Pirate Fall", ID = "http://www.roblox.com/asset/?id=750780242"},
            {Name = "Sneaky Fall", ID = "http://www.roblox.com/asset/?id=1132469004"},
            {Name = "Toy Fall", ID = "http://www.roblox.com/asset/?id=782846423"},
            {Name = "Knight Fall", ID = "http://www.roblox.com/asset/?id=657600338"},
            {Name = "Confident Fall", ID = "http://www.roblox.com/asset/?id=1069973677"},
            {Name = "PopStar Fall", ID = "http://www.roblox.com/asset/?id=1212900995"},
            {Name = "Princess Fall", ID = "http://www.roblox.com/asset/?id=941000007"},
            {Name = "Cowboy Fall", ID = "http://www.roblox.com/asset/?id=1014384571"},
            {Name = "Patrol Fall", ID = "http://www.roblox.com/asset/?id=1148863382"},
            {Name = "Edited Zombie Fall", ID = "http://www.roblox.com/asset/?id=616157476"},
        }
    
    
        local FallList = {}
    
    
        for _, anim in ipairs(FallAnimations) do
            table.insert(FallList, anim.Name)
        end
    
        local selectedFallAnimID
    
        local dropdown = Animations:CreateDropdown("Fall Animations", FallList, function(CurrentFallOption)
            local function StopAnim()
                plr.Character.Animate.Disabled = false
                local animtrack = plr.Character.Humanoid:GetPlayingAnimationTracks()
                for _, track in pairs(animtrack) do
                    track:Stop()
                end
            end
    
            StopAnim()
            plr.Character.Animate.Disabled = true
    
    
            for _, anim in ipairs(FallAnimations) do
                if anim.Name == CurrentFallOption then
                    selectedFallAnimID = anim.ID
                    break
                end
            end
    
    
            plr.Character.Animate.fall.FallAnim.AnimationId = selectedFallAnimID
            plr.Character.Animate.Disabled = false
    
        end)
    
        Animations:CreateToggle("Auto Fall", function(AutoFall)
            getgenv().AutoFalls = AutoFall
    
    
            local function onCharacterAdded(character)
                local humanoid = character:WaitForChild("Humanoid")
    
    
                if humanoid then
                    if character.Animate.idle.Animation1.AnimationId ~= selectedFallAnimID then
                        character.Animate.fall.FallAnim.AnimationId = selectedFallAnimID
                    end
                end
            end
    
    
            plr.CharacterAdded:Connect(onCharacterAdded)
    
    
            if plr.Character then
                onCharacterAdded(plr.Character)
            end
    
            while true do
                wait(0)
                if not getgenv().AutoFalls then
                    _G.AutoFalls = false
                    return
                end
    
                _G.AutoFalls = true
                local AutoFallConnection = nil
    
                AutoFallConnection = RunService.Stepped:Connect(function()
                    task.spawn(function()
                        if plr.Character then
                            if selectedFallAnimID then
                                if not (plr.Character.Animate.idle.Animation1.AnimationId == selectedFallAnimID) then
                                    plr.Character.Animate.fall.FallAnim.AnimationId = selectedFallAnimID
                                end
                            end
                        end
                    end)
                end)
    
                repeat task.wait() until _G.AutoFalls == false
                AutoFallConnection:Disconnect()
            end
        end)
    
        
    local Message = function(_Title, _Text, Time)
        game:GetService("StarterGui"):SetCore("SendNotification", {Title = _Title, Text = _Text, Duration = Time})
    end
        
    local dropdown 
    local targetDropdown
    local whitelistDropdown
    local character = plr.Character or plr.CharacterAdded:Wait() 
    local selectedPlayerName = nil 
    
    function UpdatePlayerList()
        local playerDistances = {}
        
        
        getgenv().PlayerLists = nil
        
        for _, player in pairs(game.Players:GetChildren()) do
            if player ~= plr and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (player.Character.HumanoidRootPart.Position - character.HumanoidRootPart.Position).magnitude
                
                
                if not whitelist[player.Name] then
                    table.insert(playerDistances, {name = player.Name, distance = distance})
                end
            end
        end
        
        table.sort(playerDistances, function(a, b)
            return a.distance < b.distance
        end)
        
        local newPlayerList = {}
        
        
        for _, playerInfo in ipairs(playerDistances) do
            table.insert(newPlayerList, playerInfo.name)
        end
        
        if selectedPlayerName and not table.find(newPlayerList, selectedPlayerName) then
            table.insert(newPlayerList, selectedPlayerName) 
        end
        
        PlayerList = newPlayerList 
        
        
        if dropdown then
            dropdown:Refresh(PlayerList) 
        end
    end
    
    function RemovePlayerFromLists(playerName)
        if whitelist[playerName] then
            whitelist[playerName] = nil
            Message("Removed from whitelist: ", playerName, 5)
        end
        if targetList[playerName] then
            targetList[playerName] = nil
            Message("Removed from target list: ", playerName, 5)
        end
    end
    
    
    game.Players.PlayerRemoving:Connect(function(player)
        RemovePlayerFromLists(player.Name)
        UpdatePlayerList()
    end)
    
    
    function RefreshWhitelistDropdown()
        local whitelistList = {}
        for playerName, _ in pairs(whitelist) do
            table.insert(whitelistList, playerName)
        end
        
        if whitelistDropdown then
            whitelistDropdown:Refresh(whitelistList)
        end
    end
    
    function RefreshTargetDropdown()
        local targetListDisplay = {}
        for playerName, _ in pairs(targetList) do
            table.insert(targetListDisplay, playerName)
        end
        
        if targetDropdown then
            targetDropdown:Refresh(targetListDisplay)
        end
    end
    
    Target:CreateButton("Whitelist Player", function(bool)
        if selectedPlayerName then
            
            local playerExists = game.Players:FindFirstChild(selectedPlayerName)
            if playerExists then
                
                if targetList[selectedPlayerName] then
                    targetList[selectedPlayerName] = nil
                    Message("Removed from target list: ", selectedPlayerName, 5)
                    RefreshTargetDropdown()  
                end
                
                
                whitelist[selectedPlayerName] = true
                Message("Added to whitelist: ", selectedPlayerName, 5)
                UpdatePlayerList()  
                RefreshWhitelistDropdown()  
            else
                Message("Player does not exist: ", selectedPlayerName, 5)
            end
        else
            Message("Player not selected.", selectedPlayerName, 5)
        end
    end)
    
    Target:CreateButton("Target Player", function(bool)
        if selectedPlayerName then
            
            local playerExists = game.Players:FindFirstChild(selectedPlayerName)
            if playerExists then
                
                if whitelist[selectedPlayerName] then
                    whitelist[selectedPlayerName] = nil  
                    Message("Removed from whitelist: ", selectedPlayerName, 5)
                    RefreshWhitelistDropdown()  
                end
                
                
                targetList[selectedPlayerName] = true
                Message("Added to target list: ", selectedPlayerName, 5)
                RefreshTargetDropdown()  
            else
                Message("Player does not exist: ", selectedPlayerName, 5)
            end
        else
            Message("Player not selected.", 5)
        end
    end)
    
    Target:CreateButton("Unwhitelist Player", function(bool)
        if selectedPlayerName and whitelist[selectedPlayerName] then
            whitelist[selectedPlayerName] = nil  
            Message("Removed from whitelist: ", selectedPlayerName, 5)
            UpdatePlayerList()  
            RefreshWhitelistDropdown()  
        else
            Message("Player not whitelisted or not selected.", 5)
        end
    end)
    
    
    Target:CreateButton("Print Whitelist", function(bool)
        print("Current Whitelist:")
        for playerName, _ in pairs(whitelist) do
            Message("Whitelisted: ", playerName, 5)
            print(playerName)
        end
    end)
    
    Target:CreateButton("Print Target List", function(bool)
        print("Current Target List:")
        for playerName, _ in pairs(targetList) do
            print(playerName)
        end
    end)
    
    dropdown = Target:CreateDropdown("Players", PlayerList, function(PLD)
        selectedPlayerName = PLD
        getgenv().PlayerLists = PLD
    end)
    
    
    whitelistDropdown = Target:CreateDropdown("Whitelist", {}, function(selected)
        if whitelist[selected] then
            whitelist[selected] = nil  
            Message("Removed from whitelist: ", selected, 5)  
            UpdatePlayerList()  
            RefreshWhitelistDropdown()  
        else
            Message("is not in the whitelist.", selected, 5)  
        end
    end)
    
    
    targetDropdown = Target:CreateDropdown("Target Players", {}, function(selected)
        if targetList[selected] then
            targetList[selected] = nil  
            Message("Removed from target list: ", selected, 5)  
            UpdatePlayerList()  
            RefreshTargetDropdown()  
        else
            Message(" is not in the target list.", selected, 5)  
        end
    end)
    
    UpdatePlayerList()
    RefreshWhitelistDropdown()  
    RefreshTargetDropdown()  
    
    while true do
        pcall(function()  -- Use pcall to prevent the loop from stopping due to errors
            UpdatePlayerList()
            RefreshWhitelistDropdown()  
            RefreshTargetDropdown()  
        end)
        wait(1)  -- Keep a short wait to avoid overwhelming the server
    end
    end
